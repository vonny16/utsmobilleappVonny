{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { connect } from 'react-redux';\nimport { addOrder } from \"../redux/actions/orderAction\";\nimport { emptyCart } from \"../redux/actions/cartActions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CustomerForm = function (_Component) {\n  _inherits(CustomerForm, _Component);\n\n  var _super = _createSuper(CustomerForm);\n\n  function CustomerForm() {\n    var _this;\n\n    _classCallCheck(this, CustomerForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: '',\n      phone: '',\n      email: '',\n      street: ''\n    };\n\n    _this.onPressButton = function () {\n      var _this$state = _this.state,\n          name = _this$state.name,\n          phone = _this$state.phone,\n          email = _this$state.email,\n          street = _this$state.street;\n      var _this$props = _this.props,\n          cartItems = _this$props.cartItems,\n          navigation = _this$props.navigation,\n          addOrder = _this$props.addOrder,\n          emptyCart = _this$props.emptyCart;\n\n      if (name === '') {\n        return Alert.alert('enter name');\n      }\n\n      if (phone === '') {\n        return Alert.alert('enter phone');\n      }\n\n      if (email === '') {\n        return Alert.alert('enter email');\n      }\n\n      if (street === '') {\n        return Alert.alert('enter street');\n      }\n\n      var customer = {\n        name: name,\n        phone: phone,\n        email: email,\n        street: street\n      };\n      addOrder({\n        cartItems: cartItems,\n        customer: customer\n      });\n      emptyCart();\n\n      _this.setState({\n        name: ''\n      });\n\n      _this.setState({\n        phone: ''\n      });\n\n      _this.setState({\n        email: ''\n      });\n\n      _this.setState({\n        street: ''\n      });\n\n      navigation.navigate('Receipt');\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomerForm, [{\n    key: \"renderTextfield\",\n    value: function renderTextfield(options) {\n      var _this2 = this;\n\n      return _jsx(TextInput, {\n        style: styles.textField,\n        onChangeText: function onChangeText(value) {\n          return _this2.setState(_defineProperty({}, options.name, value));\n        },\n        placeholder: options.label,\n        value: this.state[options.name],\n        keyboardType: options.keyboard || 'default'\n      });\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      return _jsx(TouchableOpacity, {\n        style: styles.btn,\n        onPress: this.onPressButton,\n        children: _jsx(Text, {\n          style: styles.btnText,\n          children: \"proceed to checkout\"\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: styles.panel,\n        children: [this.renderTextfield({\n          name: 'name',\n          label: 'Your name'\n        }), this.renderTextfield({\n          name: 'phone',\n          label: 'Your phone number',\n          keyboard: 'phone-pad'\n        }), this.renderTextfield({\n          name: 'email',\n          label: 'Your email address',\n          keyboard: 'email-address'\n        }), this.renderTextfield({\n          name: 'street',\n          label: 'Your street'\n        }), this.renderButton()]\n      });\n    }\n  }]);\n\n  return CustomerForm;\n}(Component);\n\nvar styles = StyleSheet.create({\n  panel: {\n    backgroundColor: '#fff',\n    borderRadius: 3,\n    padding: 10,\n    margin: 10\n  },\n  textField: {\n    height: 40,\n    margin: 8\n  },\n  btn: {\n    backgroundColor: '#34495e',\n    borderRadius: 3,\n    padding: 12,\n    flex: 1\n  },\n  btnText: {\n    textAlign: 'center',\n    color: '#fff',\n    fontSize: 14\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cartItems: state.cart.cart\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addOrder: addOrder,\n  emptyCart: emptyCart\n})(CustomerForm);","map":{"version":3,"sources":["D:/ReactNativeProject/react-native-shop-with-expo/src/components/CustomerForm.component.js"],"names":["React","Component","connect","addOrder","emptyCart","CustomerForm","state","name","phone","email","street","onPressButton","props","cartItems","navigation","Alert","alert","customer","setState","navigate","options","styles","textField","value","label","keyboard","btn","btnText","panel","renderTextfield","renderButton","StyleSheet","create","backgroundColor","borderRadius","padding","margin","height","flex","textAlign","color","fontSize","mapStateToProps","cart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  FlatList,\n  Alert\n} from 'react-native';\nimport { connect } from 'react-redux';\n\nimport { addOrder } from '../redux/actions/orderAction';\nimport { emptyCart } from '../redux/actions/cartActions';\n\nclass CustomerForm extends Component {\n state = {\n    name:'',\n    phone: '',\n    email: '',\n    street: '',\n  }\n\n  renderTextfield(options) {\n    return (\n        <TextInput style={styles.textField} onChangeText={(value) => this.setState({[options.name]: value})} \n                placeholder= {options.label} value={this.state[options.name]} keyboardType= {options.keyboard || 'default'}/>\n      );\n  }\n\n  onPressButton = () => {\n        const {name, phone, email, street} = this.state;\n        const { cartItems, navigation, addOrder, emptyCart } = this.props;\n        if (name === '') { return Alert.alert('enter name')}\n        if (phone === '') { return Alert.alert('enter phone')}\n        if (email === '') { return Alert.alert('enter email')}\n        if (street === '') { return Alert.alert('enter street')}\n        let customer = { name: name, phone: phone, email: email, street: street}\n        addOrder({cartItems: cartItems, customer: customer});\n        emptyCart();\n        this.setState({name: ''});\n        this.setState({phone: ''});\n        this.setState({email: ''});\n        this.setState({street: ''});\n        navigation.navigate('Receipt');\n    }\n\n  renderButton() {\n        return (\n            <TouchableOpacity style={styles.btn} onPress={this.onPressButton}>\n                <Text style={styles.btnText}>proceed to checkout</Text>\n            </TouchableOpacity>\n        );\n    }\n\n  render() {\n    return (\n            <View style={styles.panel}>\n                {this.renderTextfield({name: 'name', label: 'Your name'})}\n                {this.renderTextfield({name: 'phone', label: 'Your phone number', keyboard: 'phone-pad'})}\n                {this.renderTextfield({name: 'email', label: 'Your email address', keyboard: 'email-address'})}\n                {this.renderTextfield({name: 'street', label: 'Your street'})}\n                {this.renderButton()}\n            </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n\t    panel: {\n        backgroundColor: '#fff',\n        borderRadius: 3,\n        padding: 10,\n        margin: 10\n    },\n    textField: {\n        height: 40,\n        margin: 8\n    },\n    btn: {\n        backgroundColor: '#34495e',\n        borderRadius: 3,\n        padding: 12,\n        flex: 1,\n    },\n    btnText: {\n        textAlign: 'center',\n        color: '#fff',\n        fontSize: 14\n    }\n});\n\nconst mapStateToProps = (state) => ({\n\tcartItems: state.cart.cart\n})\nexport default connect(mapStateToProps, {addOrder, emptyCart})(CustomerForm);"]},"metadata":{},"sourceType":"module"}